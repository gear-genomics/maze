import { axisLeft, axisTop } from 'd3-axis'
import { scaleLinear } from 'd3-scale'
import { event, select } from 'd3-selection'
import { zoom, zoomIdentity } from 'd3-zoom'
import kmers from 'k-mers'
import pako from 'pako'
import revcom from 'revcom'

$('#result-modal').on('shown.bs.modal', run)

const exampleButton = document.getElementById('btn-example')
exampleButton.addEventListener('click', loadExample)

const textareaReference = document.getElementById('textarea-reference')
const textareaQuery = document.getElementById('textarea-query')

const dropzoneReference = document.getElementById('dropzone-reference')
const dropzoneQuery = document.getElementById('dropzone-query')

setupSequenceDropzone(dropzoneReference, textareaReference)
setupSequenceDropzone(dropzoneQuery, textareaQuery)

const inputK = document.getElementById('input-k')

const container = select('.modal-content')
const chart = select('#chart')
const canvas = select('#canvas')
const context = canvas.node().getContext('2d')
const svg = select('#svg')

const margin = {
  left: 75,
  right: 75,
  top: 75,
  bottom: 75
}

function run() {
  let reference = getSequence(textareaReference.value, 'Reference')
  let query = getSequence(textareaQuery.value, 'Query')
  let k = parseInt(inputK.value, 10)
  if (reference.seq && query.seq && Number.isInteger(k) && k > 0) {
    visualize(k, reference.seq, query.seq)
  }
}

function visualize(k, seq1, seq2) {
  const lenSeq1 = seq1.length
  const lenSeq2 = seq2.length

  const width = Math.min(
    container.node().clientWidth,
    container.node().clientHeight
  )
  const height = width

  const innerWidth = width - margin.left - margin.right
  const innerHeight = height - margin.top - margin.bottom

  chart.style('width', `${width}px`).style('height', `${height}px`)
  svg.attr('width', `${width}px`).attr('height', `${height}px`)

  svg.selectAll('*').remove()

  const g = svg
    .append('g')
    .attr('transform', `translate(${margin.left}, ${margin.top})`)

  canvas
    .attr('width', innerWidth)
    .attr('height', innerHeight)
    .style('transform', `translate(${margin.left}px, ${margin.top}px)`)

  const x = scaleLinear()
    .domain([0, lenSeq1 - 1])
    .range([0, innerWidth])

  const y = scaleLinear()
    .domain([0, lenSeq2 - 1])
    .range([0, innerHeight])

  const xAxis = axisTop(x)
  const yAxis = axisLeft(y)

  const gXaxis = g.append('g').call(xAxis)
  const gYaxis = g.append('g').call(yAxis)

  g.append('text')
    .attr('transform', `translate(${innerWidth / 2}, -40)`)
    .style('text-anchor', 'middle')
    .text('Sequence 1')

  g.append('text')
    .attr('transform', `translate(-60, ${innerHeight / 2}) rotate(-90)`)
    .style('text-anchor', 'middle')
    .text('Sequence 2')

  // TODO: better border lines
  g.append('line')
    .style('stroke', 'black')
    .attr('x1', innerWidth)
    .attr('y1', 0)
    .attr('x2', innerWidth)
    .attr('y2', innerHeight)

  g.append('line')
    .style('stroke', 'black')
    .attr('x1', 0)
    .attr('y1', innerHeight)
    .attr('x2', innerWidth)
    .attr('y2', innerHeight)

  const zoomBehavior = zoom()
    .scaleExtent([1, Infinity])
    .translateExtent([[0, 0], [innerWidth, innerHeight]])
    .on('zoom', () => {
      draw(event.transform)
    })

  select('canvas').call(zoomBehavior)

  const index = buildIndex(k, seq1)

  /*
   * this is needed to reset the transform on subsequent runs
   * note that this will run draw as a side effect, so all setup
   * has to happen beforehand
   */
  select('canvas').call(zoomBehavior.transform, zoomIdentity)

  function draw(transform) {
    context.clearRect(0, 0, width, height)

    gXaxis.call(xAxis.scale(transform.rescaleX(x)))
    gYaxis.call(yAxis.scale(transform.rescaleY(y)))

    const iterKmers = kmers(k, seq2)
    context.beginPath()
    context.strokeStyle = 'dodgerblue'
    while (true) {
      const kmer = iterKmers.next()
      if (kmer.value === undefined) {
        break
      }
      if (kmer.value in index) {
        for (let hit of index[kmer.value]) {
          const [x1, y1] = transform.apply([x(hit), y(kmer.index)])
          const [x2, y2] = transform.apply([x(hit + k), y(kmer.index + k)])
          context.moveTo(x1, y1)
          context.lineTo(x2, y2)
        }
      }
    }
    context.stroke()

    iterKmers.seek(0)
    context.beginPath()
    context.strokeStyle = 'red'
    while (true) {
      const kmer = iterKmers.next()
      if (kmer.value === undefined) {
        break
      }
      const kmerRc = revcom(kmer.value)
      if (kmerRc in index) {
        for (let hit of index[kmerRc]) {
          const [x1, y1] = transform.apply([x(hit), y(kmer.index + k)])
          const [x2, y2] = transform.apply([x(hit + k), y(kmer.index)])
          context.moveTo(x1, y1)
          context.lineTo(x2, y2)
        }
      }
    }
    context.stroke()
  }
}

function buildIndex(k, seq) {
  const index = {}
  const iterKmers = kmers(k, seq)
  while (true) {
    const kmer = iterKmers.next()
    if (kmer.value === undefined) {
      break
    }
    if (kmer.value in index) {
      index[kmer.value].push(kmer.index)
    } else {
      index[kmer.value] = [kmer.index]
    }
  }
  return index
}

function getSequence(str, id = '') {
  const ret = {
    header: '',
    id,
    seq: ''
  }
  if (str.startsWith('>')) {
    const headerEnd = str.indexOf('\n')
    ret.header = str.substring(0, headerEnd)
    const match = ret.header.match(/>\s*(\S+)/)
    if (match) {
      ret.id = match[1]
    }
    ret.seq = str
      .substring(headerEnd)
      .replace(/\s+/g, '')
      .toUpperCase()
  } else {
    ret.seq = str.replace(/\s+/g, '').toUpperCase()
  }
  return ret
}

function handleDragEnter(ev) {
  ev.stopPropagation()
  ev.preventDefault()
  ev.target.classList.add('dropzone--active')
}

function handleDragOver(ev) {
  ev.stopPropagation()
  ev.preventDefault()
}

function handleDragLeave(ev) {
  ev.stopPropagation()
  ev.preventDefault()
  ev.target.classList.remove('dropzone--active')
}

function getDroppedSequences(ev, cb) {
  const dt =
    ev.dataTransfer || (ev.originalEvent && ev.originalEvent.dataTransfer)
  const files = ev.target.files || (dt && dt.files)
  const f = files[0]

  readFasta(ev.target, f, cb)
}

function readFasta(node, f, cb) {
  const fReader = new FileReader() /* global FileReader */
  const isGzip = /\.gz$/.test(f.name)
  if (isGzip) {
    // gzip
    fReader.readAsArrayBuffer(f)
  } else {
    fReader.readAsText(f)
  }
  fReader.onload = function(ev) {
    let fContent = ev.target.result
    if (isGzip) {
      fContent = pako.ungzip(fContent, { to: 'string' })
    }
    cb(fContent)
  }
}

function setupSequenceDropzone(node, target) {
  node.addEventListener('dragenter', handleDragEnter)
  node.addEventListener('dragleave', handleDragLeave)
  node.addEventListener('dragover', handleDragOver)
  node.addEventListener('drop', ev => {
    ev.stopPropagation()
    ev.preventDefault()
    ev.target.classList.remove('dropzone--active')
    const seq = getDroppedSequences(ev, seq => {
      target.value = seq
    })
  })
}

const exampleSeq1 =
  'CAGCACTTTGGGAGGCTAAGGCGGGTGGATCACCTGAGGTCAGGAGTTCAAGACCAACCTTACCAACATGGTGAGACTCTGTCTCTACTAAAAATACAAAAAATGAGCCGGGCGTGGTGGCGCATGTCTGTAGTCTCAGCTACTCAGGAGGCTGAGACAGGAGAATCAGTTGAACCCGGGAGGCAGAGGTTGCAGCGAGCCAAGATTGCACCACTGCACTCCAGCCTGGGTGACAGAGCAAGACTCTGTCCCCCCCCAAAAAAAAGGGGGAGAGAGAGAGAAAGAGAGGAGATTCCCAGACACACTACCCTTTTAAATGGTAAATGGAAAATATTAAAACTATTATTGATTTGACTCATTCGAGGCTTAACCTGTCATAAATGTATCTTCTTAATTTCTCTCCTTCAAAACTGCTTCAGAACTTTGTATGAAGCGAGAAAGTAATTACAAATATCTTAGATTTTTCTTATTGCATGGTGACAGAATAATCAATCAAAATCTGCAAAATGGAGACATTTTTCAATCTTTAAGGAAGATGTTAAAAACTAAACAAACACAGAAGAACTATGTCCAACTCTTTAAAATGAACAATGAATTCTAATTACCTCTTCTTGAAACACAATTATGGCTTCCTGGAATTGTTTTTCACTTTCCCCTGTGGCGCTCAAAAGCTTTGTGTTTTCATAGAGAGTTTCATTCACAATGCGATCAGACTGAAAATTGAAAAGTATTTTACATTATTCACGCCACAAGGTAGTATTTCAATTTTTCAAACTTCTTCAAAATTTTCAAACATCTGTGCACACACCTTAGATTTGAAAACAGCTCCTAGGATACCTGTCGCCACCTGCAGGAGCAGGATCAGAAGCAAGCCTATGAAAAACTGAAGAAGAGAAAAAGAAATATACATTATCCTCAGTGCATTCAGTAACATCTGGGGACATTCTGGCACAGCACTTCTCTCTACAGCTGGGATTATATCACAGTGAGAGTGTCAGTCACACTCTTCATTTATTCCACTTTTTACTTCAAGCTGAAAATTTTGGGTTCATTACTACTCAGAAAATTGCTCCAGAGACTGATCGAGGAAAGTGGTTCAGGCAAAAAAATTATCAAAACAACCATTGATATCTGTATGATATTGACTAGAGGGAAGTTTGAAAACTTAGATGAGTTTATTTGAGTATTATTTTACTCCTTCCCTTTCTTCATCAAACACAACCTCACACAAACTCAGAATTGGCTTTGAAACAGCATCTCCACTACATTCAGAATCACCTGGCATCTTGTTACATATATAGATTCCTGAAATCGGCTTCAGATATGCTGAATCATAAGTTTGAAGGATGCAGCCCAAAGACAATTAGCTTTTTTTTTAAACAAGCTCCTTGAGTAATTAAATTCTTCAATTGCAAATGAGGCCTTATTGTTCAAAAAGCAATCAGTAGGAATGTTATTAGAGTCCCTTTAAAACTCTGTCTCTACCGTCCCTCACAATAAACAAACAGTTTTGAACATTTTTCTCAGGTACTGATATAATCCTTACTTTATTAGAGGAATAAGTTTAGATTAGACCTGATAAACTTTTATGTCATATTTGTATCTGATAAACACTTGATTTTTTTCTAATATTTTTACTATATCCATTTTCTACTGTATATGTTAAAAGTGAATGCCTGTGAATTATCCAAACCCAATTTATCCTCCTCAATGCTCTCTAAGAGATAATTCTGATTATCTCATTCATTTAAACTTTTTTTTTAGCATGGCATGTAGAACACCTATGATTTTACCACAACCCACACTTGGATTCATCTTCCATCATTTACTGGAAACAGTTTTGCCGGTCTCCTGCCATACCCAAGGCTTCTCAGTTCCCAAACACACCAGCACTGTACTGCCACGTTGTCTTTCCGGAAAGCTTTTCCTACCCTCACTCATACAAATACCTTATTCACTTCTGCCCTGGTTTGAAAATCCCATCCCCTGTCTTGCCCTTTGCTTCTGGGGCCACTCCCACTGTAGCTATTTGCTTACTTATTAACCTTCCCTAGTAGGTTCTAAAGGTCTTATGTATTATTTCGCACAATATCTGACACATAGAGGTATGGCAGTAATGTTGAATGAGTGAATGAATGAATGGATGAATGATTAAAATTTGTCTCCTCTCAGAGTATCCTCCAGTTTCTAAGCCAAACTAAGCCAAATCTAAGCCATATCAGCTTCCACAATCAAACCTTCTAAAGAGAAGTTGGAGTTAGAGTTTCATCAATCATGGCACGTTCTTTTAACAGACAATAGGGATGGGAGAGAATCCTCTGGAGTCTGAAGGTTGGACACTGGGATTTGTTTGGAGAACTCACCAACAGAAGCATGCAGCGACTTTCTTTTATAGCACCGCAGCATCCCAGGAAGCCCAGAATCATGATGATGGCACCTACAGCAATCAATATGTCCACAGCAACGTAGGAGCTAGAGCCTACATCTTCAGAACCAAAAATCTGAAGTAAAAAAGAGATTAATGGCAGAAAATTTATTTCCTTGAAGTTTATTTTGCTCATTCAACAAATATCCATTGAGTGCCTCCTATGTGTCAAGTCCTGTGCCAGGACCCTGAAATACATCAGTGATCTTAAAAAGTACAAATCCTTGCCCTCATGGAGCTCACATTCTATTGAAGTGCTTATATTTTTCTAAAATGATATGATGAAAGCTGGGTGGAAGAAATGTAATAGGTTTTTTTAAACCGTATTTTTAAAAGCTTAGGACAGTTACTTTTACTCTTCTTGATGTAATCTTTGGTTCACATATTTTGTGTATTCTATATAAAGTGCATTATAAAAGCATGTGTTGTTATGGTTTTTAATTCTTTAAAAAGTTCAAGCTCTTTAAACTATTGATAGACACAACAATATGAATTAATTTCAGAGTCATTATGCTGAGCTAAAGAAGCCATAGAAAAAAGTAAATACTGTATGATTCCATTTCTATAAAGTTCAATCATAAGCAAAACTATGGTTATAAAAATCAAAGCAGTGCTTGACTTTGAGCAAGGCAGAAGGGAAAGCAAGAGTTAACTGAAAAGGGACATGAGGGAACTTCCATGGGTTAATAAAAATGCTTTGTATCCTCATTAAAAAGAAATCCAGTTCCTGATATTTCATATCTATTTTATCTCTTTGTTCCCAAAAGCCATAGTCCATAGAGTCATCTAGAAACTCTATTTTGACTGTTAGTTAATGAGATATGAAGGGAAAAAAAATCCTAGAGCCCTTTATAGTGGGTGGGCTACCCATCAGGCATAATTCAGTTCTCCCAACAACACACACATACTCGTCTTCATCACCCTCATAACACTTAGCCTCAGCCACCTCTTGTCCTCGATAAGTGGATTTATCCAGAAGTAAATCACAATTAAAAAGTAAAGCCTTGTGCGTGTCTTATGCATAAATCCTATATGTAGCCCATTTGCCTTCTATAACCTCTATCTACTGGGCTGTCTCTAGATAGAGCACTAGTTCCTAGACTAACTCGAAACCTCTGCCTCCCAGAATGGGCTATATAGCATGTAGGTCAGCTCCCTTAACAGTCAATACAAAAATGAC'
const exampleSeq2 =
  'AGCACTTTGGGAAGGCTAAGGCGGGGTTGATCACCTGAAGGTCAGGAGTTCCAAGACGCAACCTTAACCACATGGTGAAGACTCCTGTCTCTACTAAAAAAATACAAAAATGAAGCCGGGCGGTGGTTGGCGCATGTTCTTGTAAGTCTCAGCTAACTGCAGGAAGGCTTTGAGACGGAGAATCAGTTGAACCCGGGAGGCAGAAGGTTGCAAGCGAGCCAAGATTTTGGGCGCCACTGCACTACCAGCCTGGGTGGACAGAAGCAGACTTCCTGTCCCCCCCCAAAAAAAAGGGGGGAGAGAGGAGAGAAAAAGAGAGGAGAATTGCGCAGACAACACTACGTTTTTAAATGGTAAAATGGAAAATTGAATTAAAACTATTATTCGGATGAGCTCATTCGAGGCTTAACCTTGTTCATAAATGTATCTTCTTAATTTTTCTCTCCTTCAAAACTGCTGTCAGAACTTTGTTTATGAAAGCGAGAAAAGTAATGTTACAAAATATCTTTAGATTTTTCTTATTGCAGTGGGAAACCAGAAATATCAATCAAAATCGCAAAATGGAGAACATTTTTCATCTTTAAGGAAGATGTTAAAAACTAAACAAACACAGAAGAAACTTAATGCAAACTTCTTTTAAAAATGAACAATGATTCTAAATTACCGTCTTCTTGAAACACAATTTATGGCTTTTCCTGGAATTGTTTTTTTTCACTTTCCCCTGTGGCGCTGCAAAGCTTTGTGTTTTCCCATTAGAGGAGTTTTTTCATTCACAATGCGATGCAAGACTGAAAATTGAAAAGTATTTTACATTATTTTACGCCACAAAAGGTAGTATTCAATTTTTTTCAAACTTCTTCCAAAAATTTTTGCAAAAACATCCCTTTGTGGCAAACACACCTTAAGATTTTTGAAAAACAGTCTCCTAGGAAACCTTGTTCGCCAACCTGCAGGAAGCAGGATCAAGAAAGCAAGCCTATGAAAAAACTGAAGAAGGAGAAAAGAAATTACATTATCCTCAAAGTGGCATTGAAGTACATCTTGGGGAATTTCTGGCAAACAGCACTTCTCTTAACAGCTTGGATTATATCACAGTTTGAGAGGCAGTCACACCTTTTTCAATTTATTTCCACTTTTTTTAAAAACTTCCAAGCTGAAAAATTTTGGGTTCATTTATATCAGAAAAATTTGCTGCCAGAGAACTGGAGTTCCGAGGAAAGTTGGTTTATTCAGGCCAAAAAAAATTATGCAAAAACAACCATTTGATAATTCTGTATGAATAATTGACTTGAGGGAAAAGTTTGAAATTAGAAAATGAGTTTTATTTGAGTATTATTTTTAGCTCCTTGTCCCTTTCTTCAATCAAAACACACCTCAACAAACAAACTCCAGAATTGGCTTTGAAAACGCATCTCCACTACATTCAGAATCACCTGGCAAATCTGTTTACAATATAATGATTTCCCTGAAAATCGGGCTTCAAAGATATGCTGAATCCATAAGTTTTTGAAGGAATGCAAGCCCAAAGGACATTAGCTTTTTTTTTTTTTTAACAAGCTTCCTTTGAGTAATTAAAATTTCTTCAATTGGGCAAAATGAAGGCCTTATTGTTTTTCAAAAAAGCAATCAAAGTAGGAATGTTATTGAGTCCCTTTTAAAACTCTGTCCCTCCTTACCGTCCTTCACAATAAACAAACAGTTTTTGAACATTTTTTCTCCAGGTACGTGATAATAAATCCTTAACTTTATTAGAGGAATAAGTTTTTAGATTAGAACCTTGATTAAACTTTTATGTCATAATTTGTATTCTGGAATTAAACACTGATTTTTTTCCTTTAAATATTTTTACTTATATCCATTTTTCTAACTGTTATTGTTAAAAAGTGGAATGCCTGTGAATTATCCAAACCCGCAATTTTATCTCCCTCCAATTGGCTTCTTCTTTAAGAAGATTATTTCATGAATTATCTCAATTCATTTAAACTTTTTTTTAGCATGGCGCAATGTAGAACACCTTATGATTTACACACCCACACTTGGAATTCCATCTTCCATCATTTACTGGAAAACAGTTTTGCCGTCCTGCCCCTTGGCCATAACCCAAGGCTTCTCAGTTCCCAACACACCAGCCACTGTTACTGCACGATTGTCTTGTTCCGGAAAAGCTTTTCCTACCCCCTCCTCAATACAAATACCTTATTCCACTTCTGCCCTTGGTTATGAAAAATCCCAATCCCCCCTTAGTGGTCTTTTGCCCTTTTTGGCTTCTGGGGGCCACTTTCCACTGTAGCTATTTGCTTACTTATTAAAACCTTCCCTAGTAGGTTCTAAAAGGTCTTATGTATTAATTTCGCACAATATCTGAAACACATAGAAGGGTATGGCAAAGTTAAATGTTGAATGAAGTGAAGAATGAATGGATGAAATGGATTAAAATTTGTTCTCCTCTTTCAGAGTATCCTCAGTTTCCTTAAAAGCCAAAACTAAGCCAAATCTAAGCCATAAGTCAGCTTCCCCACAATCAAACCTTCTAAAAGAGAAAAGTTGGAAGTTAGAGTTTTTTCAATCAATCAATGGCACGTTTCTTTTTAACAGACAATTAGGGATGGGAAGAAAGAATCATTCTGGAAAAAGTCTGAAGGTTGGGAAACCACTGGGGAAATTTTGTTTTTGGAGAACTTTCAAAACCAACAGAAGCCAATTGCAGCCGACTTTTCTTTATAGCAACCGGCAGCGCATGCCCAGGAAGCCCAAGAAATCATGAATGATTGGCAACCTAACAGCAAATTCAATATGTTCCCACAGCCAACGTAGGAGCTAGAAGCCCCTTACAATCTTCAAGAAACCAAAAATCTGAAGTAAAAAAAAAAGATTTTAAATGGCAAGAAAATTTATTTCCTTGAAAAGTTTATTTTTTGCTCATTCAACAAATATCCATTGAAGTTTGCCTCCTATGTGTCAAGTCCTGTGCCCAGGACCCTGAAATTCATCCTTCATTTCATTTCAATCATTCATTTTTCATACATTCAAACCATTACTAGCCATACTTCTATGTGGTCCGATTATTTGTGGCGAAATTAATACATAAGACCTTTTAGAAAACCCTACTTAGGGAAGGTAATAAAGTAGCAAATAGCTTTTACAGTGGGGAGTGGCCCCAAGAAGGCAAAGGGCAAGACAGGGGAAATGGGAATTTTCAAAACCAGGGCCAGAAAGTGAAATTAAGGGTATTTTGTATGAGGTGAGGGTAGGAAAAAAGCTTTCCGGAAAGAACAAACGTTGGCAGTAACAGTGGGCTGGTGTGTTTTGGGAACTGGAGAAGCCTTTGGGTTATGGCAAGGAGACCGCAAAACTGGGTTTCCAGTAAAAATGATTGGAAAGATTGAATTCCAAGTGTGGGTTTGGGGTAAAAATTCATGGTGTTCTAACATGCCATGCTAAAAAAAAAGTTATTTAAATGAAATGAAGATTCAATCCAGAAATTATCTCTTAGAGAGGCATTGAGGAGGAATAAATTGGGTTTTGGATAATTCGACAAGGCATTTCACTTAAAAAGGTTACAAATTTGAATCTTAAAAAGTCACAAAATCCTTTGCCCTCATGGAGCCTCACAATTCTATTGAATTTGCTTAATTATTTTTCTAAATGAAAATAATGAAAAAAAAAAAATGAAGCTGGGGTTGGAAGAAATGTAAAAATGGTTTTTTTTTTTTTTAAATGTAATTTTTTTAAAAAACTTAGGAACAGTTTATTTTACTTCTTGCTTGATGTAAATTCTTTGGTTCAACAATTTTGTGTATCTATATACAAGTGCAATTAATAAAAGCCTGTGTTGTTATGGTTTTAATTCTTTAAAAAAGTTTTCAAAGGCTCTTTAAACTATGATAGACAACACAATATGAATTAAATTTTTCAGAGCATTATGCTGAAAGCTAAAGAAGCCATAGAAAAAAGTAAATAATGTATTGATCCCAATTTTCTATAAAAGTTCAATCATAAGCAAAACTATGGGGTTTTTATAAAAAAATCAAAGCAATGGCTTGACTTTTGAGCAAGGCAGAAGGGAAAAGCAAGAAAGTTAACTGAAAAAGGGACATGAGGGAAAAACTTCCATGGGGTTTTTAATAAAAATGCCTTTGTATCCTCAATTAAAAAAGAAATCCAGTTTCCTGGAATATTTTTCAATAATCTATTTTTATCTCTTTGTTTTGCCCAAAAGCCAATAGTCCATGAGAGTCATCTTAGGAAAACCTCTATTTTTTGACTGTGTAGTATAATGAGAATAATGAAAGGGAAAAAAAAATCCTAGAAGCCCTTTATTAGTGGGGGTGGGCTTACCCCATTTCAAGGCAATGAATTAAGTTCTCCCAACAACACAACATATCGTCTTCAATCACCTCATAACAACTTACCTCAGCCACCTCTTTTGTCCTGATAAGTGGGATTTATCCAGAAGTAAAATCAAATTAAAAAGTAAAAGCTTTGTGCGTGTCTTAAGCAAATCAAAATTCCTATATGTAGCCCCATTTCCTTCTTATAACCTCTATCTATGGGGCTGTCTCTAGATACGAGCACTTAGTTTTCCCTAGACTAACTCGAAAAAACTCTTGCCTCCCAGAATGGGCCTTTATAATACGCATGTAAGTCAGCTTTCCCCTTAACAGTCAATACAAAAATGAC'

function loadExample() {
  textareaReference.innerText = exampleSeq1
  textareaQuery.innerText = exampleSeq2
  inputK.value = '8'
}
